{"componentChunkName":"component---src-pages-blog-post-jsx","path":"/blog/comments-clean-code-and-javascript","result":{"data":{"prismicPost":{"uid":"comments-clean-code-and-javascript","first_publication_date":"March 19th 2020","data":{"title":{"text":"Comments, Clean Code, and JavaScript"},"content":{"html":"<p>Comments are sometimes used to explain the thoughts that can’t be explained with code. Other times, they’re used to explain what some messy code is doing.</p><p>In this article, we’ll look at how to write comments that are useful and don’t clutter up the code.</p><h2>Do We Need Comments?</h2><p>Most code should be self-explanatory. If it’s not, maybe we should think of a way to make it so. There are probably ways to make code clear enough so that comments aren’t needed.</p><p>Comments get outdated quickly as code changes since they’re often neglected when code changes. They aren’t updated as frequently as the code. This means that the code will deviate from the original code that it describes.</p><p>Code also moves around a lot. The comments don’t follow it.</p><p>We can update the comments as frequently as the code, but it’s probably better to make the code clear enough so that we don’t need the comments. The code is what we need to deal with in the first place. The comments are just there to support the code.</p><p>Inaccurate comments mislead the people who read the code. That’s not good since it leads to a wrong understanding of the code and bad changes can be made from it.</p><h2>Comments Can’t Make Up for Bad Code</h2><p>Comments may make some people more comfortable with writing bad code since they think they can make up for the mess with comments.</p><p>Clear code is much better than having messy code and lots of comments. The time writing comments is better spent on cleaning up the mess.</p><h2>Let the Code Explain Itself</h2><p>We can easily write code that explains itself. For example, instead of writing:</p><pre>if (employee.salary &lt; 50000 &amp;&amp; employee.hasChild) {\n  //...\n}</pre><p>We can write:</p><pre>const isEligibleForChildCareBenefits = (employee) =&gt; {\n  return employee.salary &lt; 50000 &amp;&amp; employee.hasChild;\n}\nif (isEligibleForChildCareBenefits(employee)) {\n  //...\n}</pre><p>The second example is better because it explains what the conditions actually mean. If we just look at the first condition, other people reading the code may not know what the conditions mean.</p><p>The second example is better because it explains what the conditions actually mean. If we just look at the first condition, other people reading the code may not know what the conditions mean.</p><p>In the second example, we have the isEligibleForChildCareBenefits function, and we know that it checks if an employee is eligible for child care benefits.</p><h2>Good Comments</h2><p>Some comments are necessary or beneficial. For example, sometimes we need a legal statement in the comments of our code.</p><h3>Legal comments</h3><p>Legal comments are sometimes needed because of corporate coding standards. This may include copyright information, licensing, and other information.</p><p>They shouldn’t form a contract or have a legal tone. We should refer to standard license or external documents whenever possible.</p><p>An example of this is:</p><pre>// Copyright (C) 2020 by Foo Inc. All rights reserved</pre><h3>Informative comments</h3><p>Sometimes we want to convey more information in the comments in addition to the code. But in most cases, they can be removed after naming things better.</p><p>An example of informative comments would be something like the following:</p><pre>// Person instance being tested\nlet person = new Person();</pre><p>In this case, we can just change the name to be more meaningful like:</p><pre>let personBeingTested = new Person();</pre><h3>Explaining intent</h3><p>Sometimes, we want to explain why we’re doing something in our code.</p><h3>Clarification</h3><p>We can also write comments to clarify something that we can’t change or we imported from other libraries that aren’t very clear.</p><p>For example, if we want to use <a target=\"_blank\" rel=\"noopener\" href=\"https://lodash.com/\">Lodash</a>’s chunk method to divide an array into an array of specified chunks, we may have to explain what we’re doing:</p><pre>import * as _ from &quot;lodash&quot;;// divide array into groups of 2\nconst arr = [1, 2, 3, 4, 5];\nconst splitArray = _.chunk(arr, 2);</pre><p>This lets people know what the chunk method does without looking at Lodash’s manual.</p>"}}}},"pageContext":{"uid":"comments-clean-code-and-javascript"}}}